package hackerrank;
import java.util.HashMap;

public class NewYearChoas {

    static void minimumBribes1(int[] q) {
        HashMap<Integer,Integer> map1 = new HashMap<Integer,Integer> ();
        HashMap<Integer,Integer>  map2 = new HashMap<Integer,Integer> ();
        int cnt = 0;
        for(int i = 0; i < q.length ; i++){
            map1.put(i+1,i);
            map2.put(q[i],i);
        }
        int i = map1.size();
        while (i > 0){
           if (map2.get(i) < map1.get(i) - 2){
                System.out.println("Too chaotic");
                break;
            } else if(map2.get(i) == map1.get(i)-2){
                cnt+=2;
            } else if(map2.get(i)== map1.get(i)-1){
                cnt++;
            }
            i--;
        }
        System.out.println(cnt);


    }
    static void minimumBribes2(int[] q) {
        int cnt = 0;
        int i = 0;
        int[] newQue = new int[q.length];
        while (i < q.length) {
            int index = i+1;
            int val = q[i];
            if(val == index){
                i++;
                continue;
            }
            if (val > index+2) {
                System.out.println("Too chaotic");
                break;
            } else if (val == index+ 2) {
                cnt += 2;
            } else if (val == index+ 1) {
                cnt++;
            }
            i++;
        }
        if (cnt > 0) {
            System.out.println(cnt);
        }
    }
    static void minimumBribes3(int[] q) {
        int cnt = 0;
        int i = q.length;
        while (i > 0) {
            int index = i;
            int val = q[i-1];
            if(val == index){
                i--;
                continue;
            }
            if (val-index > 2) {
                System.out.println("Too chaotic");
                break;
            }
            for(int j = Math.max(0, (val-2)); j < index; j++){
                if(q[j] > val){
                    cnt++;
                }
            }
            i--;
        }
        if (cnt > 0) {
            System.out.println(cnt);
        }
    }
    static void minimumBribes(int[] q) {
        int cnt = 0;
        boolean isChaotic = false;
        for (int index = q.length; index > 0; index--) {
            if (q[index-1] == index) {
                continue;
            }

            for(int i = 0; i < index-1; i++){
                if (q[i] - (i+1) > 2) {
                    System.out.println("Too chaotic");
                    isChaotic = true;
                    break;
                }
                if(q[i] > q[i+1]) {
                    cnt++;
                    swap(q, i, i+1);
                }
            }
            if(isChaotic)
                break;
        }
        if (cnt > 0 && !isChaotic) {
            System.out.println(cnt);
        }


    }
    public static void  swap(int[] arr, int i, int j){

        if(i == j ){
            return ;
        }
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;


    }
    public static void main(String[] args) {
        //int[] q = {2,1,5,6,3,4,9,8,11,7,10,14,13,12,17,16,15,19,18,22,20,24,23,21,27,28,25,26,30,29,33,32,31,35,36,34,39,38,37,42,40,44,41,43,47,46,48,45,50,52,49,51,54,56,55,53,59,58,57,61,63,60,65,64,67,68,62,69,66,72,70,74,73,71,77,75,79,78,81,82,80,76,85,84,83,86,89,90,88,87,92,91,95,94,93,98,97,100,96,102,99,104,101,105,103,108,106,109,107,112,111,110,113,116,114,118,119,117,115,122,121,120,124,123,127,125,126,130,129,128,131,133,135,136,132,134,139,140,138,137,143,141,144,146,145,142,148,150,147,149,153,152,155,151,157,154,158,159,156,161,160,164,165,163,167,166,162,170,171,172,168,169,175,173,174,177,176,180,181,178,179,183,182,184,187,188,185,190,189,186,191,194,192,196,197,195,199,193,198,202,200,204,205,203,207,206,201,210,209,211,208,214,215,216,212,218,217,220,213,222,219,224,221,223,227,226,225,230,231,229,228,234,235,233,237,232,239,236,241,238,240,243,242,246,245,248,249,250,247,244,253,252,251,256,255,258,254,257,259,261,262,263,265,264,260,268,266,267,271,270,273,269,274,272,275,278,276,279,277,282,283,280,281,286,284,288,287,290,289,285,293,291,292,296,294,298,297,299,295,302,301,304,303,306,300,305,309,308,307,312,311,314,315,313,310,316,319,318,321,320,317,324,325,322,323,328,327,330,326,332,331,329,335,334,333,336,338,337,341,340,339,344,343,342,347,345,349,346,351,350,348,353,355,352,357,358,354,356,359,361,360,364,362,366,365,363,368,370,367,371,372,369,374,373,376,375,378,379,377,382,381,383,380,386,387,384,385,390,388,392,391,389,393,396,397,394,398,395,401,400,403,402,399,405,407,406,409,408,411,410,404,413,412,415,417,416,414,420,419,422,421,418,424,426,423,425,428,427,431,430,429,434,435,436,437,432,433,440,438,439,443,441,445,442,447,444,448,446,449,452,451,450,455,453,454,457,456,460,459,458,463,462,464,461,467,465,466,470,469,472,468,474,471,475,473,477,476,480,479,478,483,482,485,481,487,484,489,490,491,488,492,486,494,495,496,498,493,500,499,497,502,504,501,503,507,506,505,509,511,508,513,510,512,514,516,518,519,515,521,522,520,524,517,523,525,526,529,527,531,528,533,532,534,530,537,536,539,535,541,538,540,543,544,542,547,548,545,549,546,552,550,551,554,553,557,555,556,560,559,558,563,562,564,561,567,568,566,565,569,572,571,570,575,574,577,576,579,573,580,578,583,581,584,582,587,586,585,590,589,588,593,594,592,595,591,598,599,596,597,602,603,604,605,600,601,608,609,607,611,612,606,610,615,616,614,613,619,618,617,622,620,624,621,626,625,623,628,627,631,630,633,629,635,632,637,636,634,638,640,642,639,641,645,644,647,643,646,650,648,652,653,654,649,651,656,658,657,655,661,659,660,663,664,666,662,668,667,670,665,671,673,669,672,676,677,674,679,675,680,678,681,684,682,686,685,683,689,690,688,687,693,692,691,696,695,698,694,700,701,702,697,704,699,706,703,705,709,707,711,712,710,708,713,716,715,714,718,720,721,719,723,717,722,726,725,724,729,728,727,730,733,732,735,734,736,731,738,737,741,739,740,744,743,742,747,746,745,750,748,752,749,753,751,756,754,758,755,757,761,760,759,764,763,762,767,765,768,766,771,770,769,774,773,776,772,778,777,779,775,781,780,783,784,782,786,788,789,787,790,785,793,791,792,796,795,794,798,797,801,799,803,800,805,802,804,808,806,807,811,809,810,814,812,813,817,816,819,818,815,820,821,823,822,824,826,827,825,828,831,829,830,834,833,836,832,837,839,838,841,835,840,844,842,846,845,843,849,847,851,850,852,848,855,854,853,857,856,858,861,862,860,859,863,866,865,864,867,870,869,868,872,874,875,871,873,877,878,876,880,881,879,884,883,885,882,888,886,890,891,889,893,887,895,892,896,898,894,899,897,902,901,903,905,900,904,908,907,910,909,906,912,911,915,913,916,918,914,919,921,917,923,920,924,922,927,925,929,928,926,932,931,934,930,933,935,937,939,940,938,936,943,944,942,941,947,946,948,945,951,950,949,953,952,956,954,958,957,955,961,962,963,959,964,966,960,965,969,968,971,967,970,974,972,976,973,975,979,977,981,982,978,980,983,986,984,985,989,988,987,990,993,991,995,994,997,992,999,1000,996,998};
        //int [] q = {1, 2, 5, 3, 7, 8, 6, 4};

        // int [] q = {1,2,5, 3, 4, 7, 8, 6};
        // int [] q = {2, 5, 1, 3, 4};
        int [] q = {1,3,5,2,9,7,4,8,6,11,10,13,14,12,18,16,15,20,19,17,21,23,24,22,26,25,28,27,29,32,31,30,34,36,38,33,39,35,37,41,40,42,43,45,44,47,46,48,51,50,52,49,53,54,55,60,56,57,58,62,63,61,66,59,68,64,65,69,67,71,70,72,75,74,73,77,76,79,78,81,80,85,83,82,87,86,84,90,88,89,92,91,94,95,93,98,96,97,99,102,100,103,101,107,105,108,104,109,106,111,113,110,112,116,115,114,117,119,122,118,121,120,123,127,124,126,125,129,128,130,132,131,133,134,136,135,138,140,139,137,141,146,142,143,147,145,144,148,151,150,149,153,155,152,156,154,159,157,160,162,161,158,164,163,165,169,166,168,170,167,172,176,171,173,174,175,179,178,182,177,184,181,180,183,186,185,188,187,191,189,192,193,190,194,197,196,198,195,201,199,200,203,202,204,208,206,209,205,207,212,210,214,213,211,216,215,219,218,217,220,222,223,225,224,221,228,227,229,226,230,232,231,234,236,235,239,233,237,240,238,242,241,243,247,244,249,245,248,246,250,251,254,252,255,253,256,258,257,260,259,264,262,261,269,263,265,266,267,268,270,272,271,274,275,277,278,273,276,282,279,280,284,283,287,281,285,289,288,290,293,286,295,292,291,296,297,294,298,299,301,302,300,303,306,304,305,307,309,308,310,314,311,315,312,313,317,316,321,318,320,324,323,322,319,325,327,326,328,330,332,329,333,331,335,336,338,334,337,339,341,340,342,344,343,346,345,348,350,347,353,349,351,355,354,357,352,356,361,360,358,359,362,363,366,364,365,367,369,368,370,371,374,372,376,373,377,378,375,379,380,382,381,384,385,386,383,389,387,390,388,394,391,392,396,397,393,395,399,398,401,403,400,406,402,405,404,407,410,408,411,413,414,412,409,415,418,417,416,420,419,421,422,425,423,426,424,428,431,429,427,432,430,434,433,435,436,439,437,442,440,438,441,443,445,446,448,444,447,450,451,453,449,454,452,455,457,456,458,460,459,463,462,465,461,464,466,469,468,467,472,471,470,473,475,474,477,476,479,478,483,480,485,481,484,482,487,486,490,488,489,492,494,493,491,497,496,495,500,499,498,501,504,502,506,503,505,508,511,507,510,509,514,513,517,512,515,520,516,518,522,519,521,523,524,525,526,528,527,529,530,531,533,532,535,534,537,536,540,539,538,542,541,543,547,546,544,545,548,549,553,551,550,555,554,557,552,558,556,560,559,562,564,563,561,565,568,566,571,569,567,570,573,572,576,575,574,577,579,583,582,578,581,585,580,586,584,588,590,587,589,593,591,592,594,597,595,598,596,600,599,602,601,604,606,603,605,607,609,611,608,610,614,613,615,612,618,620,616,619,617,622,621,628,623,625,629,624,627,626,630,632,631,633,635,634,637,638,636,640,639,643,642,645,644,641,647,649,648,646,651,650,653,654,652,656,655,659,657,658,661,660,664,662,669,663,665,667,666,668,670,672,673,671,675,674,680,676,683,677,679,681,678,684,682,687,685,689,686,690,688,694,691,692,693,696,695,697,698,702,699,701,700,705,703,707,704,706,710,708,709,712,711,714,713,715,718,716,719,717,720,721,723,727,722,725,730,726,724,731,728,729,734,733,736,732,735,737,740,738,739,742,743,741,745,744,748,746,747,752,751,750,754,749,756,753,755,759,758,761,757,764,762,760,768,763,766,765,767,771,772,770,774,769,773,776,777,780,775,778,779,781,783,785,782,784,788,786,787,791,789,790,793,796,792,794,795,799,797,801,800,798,803,802,807,804,805,806,810,809,808,811,812,813,816,814,815,818,817,819,820,822,821,824,825,823,827,826,829,830,828,832,831,834,839,833,835,837,840,843,836,838,841,842,845,848,844,846,847,851,852,850,849,853,856,855,854,858,857,860,859,861,863,864,862,867,865,866,869,868,871,870,872,874,873,876,878,875,879,877,880,884,886,883,881,882,888,885,887,890,889,891,892,894,896,895,893,900,899,898,902,897,903,906,901,904,909,908,905,910,907,914,911,912,916,913,915,920,917,922,919,918,924,921,923,925,928,927,926,930,929,931,934,932,936,933,935,937,940,938,939,944,941,945,942,947,943,946,948,950,951,949,955,953,952,957,954,956,959,960,958,962,963,961,965,964,967,966,969,972,968,970,973,971,974,976,975,977,978,980,979,983,982,981,984,985,987,991,988,990,986,993,989,995,992,996,994};

            minimumBribes(q);
        }


    }



